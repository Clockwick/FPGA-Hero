////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : oneTime.vf
// /___/   /\     Timestamp : 12/16/2020 13:42:56
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/Admin/Desktop/xilinx_workspace/DigitalProject/oneTime.vf -w C:/Users/Admin/Desktop/xilinx_workspace/DigitalProject/oneTime.sch
//Design Name: oneTime
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_oneTime(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_oneTime(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_oneTime(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module CLK2HZ_MUSER_oneTime(clk_in, 
                            clrrl, 
                            ck_out);

    input clk_in;
    input clrrl;
   output ck_out;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_81;
   wire XLXN_89;
   wire XLXN_113;
   
   (* HU_SET = "XLXI_1_38" *) 
   CD4CE_HXILINX_oneTime  XLXI_1 (.C(clk_in), 
                                 .CE(XLXN_89), 
                                 .CLR(clrrl), 
                                 .CEO(XLXN_81), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_1));
   (* HU_SET = "XLXI_2_39" *) 
   CD4CE_HXILINX_oneTime  XLXI_2 (.C(XLXN_1), 
                                 .CE(XLXN_89), 
                                 .CLR(clrrl), 
                                 .CEO(XLXN_81), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_2));
   (* HU_SET = "XLXI_3_40" *) 
   CD4CE_HXILINX_oneTime  XLXI_3 (.C(XLXN_2), 
                                 .CE(XLXN_89), 
                                 .CLR(clrrl), 
                                 .CEO(XLXN_81), 
                                 .Q0(), 
                                 .Q1(), 
                                 .Q2(), 
                                 .Q3(), 
                                 .TC(XLXN_4));
   VCC  XLXI_4 (.P(XLXN_89));
   (* HU_SET = "XLXI_12_41" *) 
   CD4CE_HXILINX_oneTime  XLXI_12 (.C(XLXN_4), 
                                  .CE(XLXN_89), 
                                  .CLR(clrrl), 
                                  .CEO(XLXN_81), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(XLXN_5));
   (* HU_SET = "XLXI_13_42" *) 
   CD4CE_HXILINX_oneTime  XLXI_13 (.C(XLXN_5), 
                                  .CE(XLXN_89), 
                                  .CLR(clrrl), 
                                  .CEO(XLXN_81), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(XLXN_6));
   (* HU_SET = "XLXI_14_43" *) 
   CD4CE_HXILINX_oneTime  XLXI_14 (.C(XLXN_6), 
                                  .CE(XLXN_89), 
                                  .CLR(clrrl), 
                                  .CEO(XLXN_81), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(XLXN_113));
   GND  XLXI_26 (.G(XLXN_81));
   (* HU_SET = "XLXI_44_44" *) 
   CD4CE_HXILINX_oneTime  XLXI_44 (.C(XLXN_113), 
                                  .CE(XLXN_89), 
                                  .CLR(clrrl), 
                                  .CEO(XLXN_81), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(ck_out));
endmodule
`timescale 1ns / 1ps

module oneTime(B1, 
               B2, 
               B3, 
               oSc, 
               od);

    input B1;
    input B2;
    input B3;
    input oSc;
   output od;
   
   wire ind;
   wire opo;
   wire XLXN_78;
   wire XLXN_79;
   wire XLXN_94;
   wire XLXN_95;
   wire XLXN_96;
   wire XLXN_101;
   wire XLXN_102;
   wire XLXN_110;
   
   (* HU_SET = "XLXI_20_45" *) 
   CB2CE_HXILINX_oneTime  XLXI_20 (.C(XLXN_78), 
                                  .CE(XLXN_79), 
                                  .CLR(opo), 
                                  .CEO(XLXN_95), 
                                  .Q0(XLXN_101), 
                                  .Q1(XLXN_96), 
                                  .TC(XLXN_95));
   VCC  XLXI_21 (.P(XLXN_79));
   GND  XLXI_23 (.G(XLXN_95));
   AND3  XLXI_25 (.I0(B3), 
                 .I1(B2), 
                 .I2(B1), 
                 .O(ind));
   AND2  XLXI_32 (.I0(XLXN_96), 
                 .I1(XLXN_101), 
                 .O(opo));
   (* HU_SET = "XLXI_34_46" *) 
   FJKC_HXILINX_oneTime  XLXI_34 (.C(ind), 
                                 .CLR(opo), 
                                 .J(XLXN_102), 
                                 .K(XLXN_102), 
                                 .Q(XLXN_94));
   VCC  XLXI_35 (.P(XLXN_102));
   INV  XLXI_36 (.I(XLXN_94), 
                .O(od));
   AND2  XLXI_38 (.I0(XLXN_94), 
                 .I1(oSc), 
                 .O(XLXN_110));
   CLK2HZ_MUSER_oneTime  XLXI_39 (.clk_in(XLXN_110), 
                                 .clrrl(opo), 
                                 .ck_out(XLXN_78));
endmodule
